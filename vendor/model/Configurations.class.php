<?php/** Defino o local onde esta a classe */namespace vendor\model;class Configurations{    /** Declaro as variavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;    private $configurationId = null;    private $title = null;    private $copyright = null;    private $author = null;    private $description = null;    private $keywords = null;    private $preferences = null;    private $history = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new MySql();    }    /** Salvo ou atualizo um registro */    public function Save($configurationId, $title, $copyright, $author, $description, $keywords, $preferences, $history): bool    {        /** Parâmetros de Entrada */        $this->configurationId = $configurationId;        $this->title = $title;        $this->copyright = $copyright;        $this->author = $author;        $this->description = $description;        $this->keywords = $keywords;        $this->preferences = $preferences;        $this->history = $history;        /** Verifico o tipo de operação */        if ($this->configurationId === 0)        {            /** Consulta SQL */            $this->sql = 'INSERT INTO configurations(configuration_id,                                                     title,                                                     copyright,                                                     author,                                                     description,                                                     keywords,                                                     preferences,                                                     history)                                                     VALUES(:configurationId,                                                            :title,                                                            :copyright,                                                            :author,                                                            :description,                                                            :keywords,                                                            :preferences,                                                            :history);';        }        else        {            /** Consulta SQL */            $this->sql = 'UPDATE configurations SET                           title = :title,                          copyright = :copyright,                          author = :author,                          description = :description,                          keywords = :keywords,                          preferences = :preferences,                          history = :history                          WHERE configuration_id = :configurationId';        }        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':configurationId', $this->configurationId);        $this->stmt->bindParam(':title', $this->title);        $this->stmt->bindParam(':copyright', $this->copyright);        $this->stmt->bindParam(':author', $this->author);        $this->stmt->bindParam(':description', $this->description);        $this->stmt->bindParam(':keywords', $this->keywords);        $this->stmt->bindParam(':preferences', $this->preferences);        $this->stmt->bindParam(':history', $this->history);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Salvo ou atualizo um registro */    public function SavePreference($configurationId, $preferences): bool    {        /** Parâmetros de Entrada */        $this->configurationId = $configurationId;        $this->preferences = $preferences;        /** Consulta SQL */        $this->sql = 'UPDATE configurations SET                           preferences = :preferences                          WHERE configuration_id = :configurationId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':configurationId', $this->configurationId);        $this->stmt->bindParam(':preferences', $this->preferences);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Consulta de um registro especifico */    public function Get(int $configurationId)    {        /** Parâmetros de Entrada */        $this->configurationId = $configurationId;        /** Consulta SQL */        $this->sql = 'SELECT * FROM configurations WHERE configuration_id = :configurationId;';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':configurationId', $this->configurationId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Remoção de um registro especifico */    public function Delete(int $configurationId): bool    {        /** Parâmetros de Entrada */        $this->configurationId = $configurationId;        /** Consulta SQL */        $this->sql = 'DELETE FROM configurations WHERE configuration_id = :configurationId;';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':configurationId', $this->configurationId);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Listagem de todos os registros */    public function All()    {        /** Consulta SQL */        $this->sql = 'SELECT * FROM configurations ORDER BY configuration_id DESC LIMIT 1;';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}