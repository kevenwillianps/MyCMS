<?php/** Defino o local onde esta a classe */namespace vendor\model;class UsersFiles{    /** Declaro as variavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;    private $userFileId = null;    private $userId = null;    private $name = null;    private $pathProfile = null;    private $pathCover = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new MySql();    }    /** Salvo ou atualizo um registro */    public function SaveProfile(int $userFileId, int $userId, string $name, string $pathProfile): bool    {        /** Parâmetros de Entrada */        $this->userFileId = $userFileId;        $this->userId = $userId;        $this->name = $name;        $this->pathProfile = $pathProfile;        /** Consulta SQL */        $this->sql = 'INSERT INTO users_files(user_file_id,                                                 user_id,                                                 name,                                                 path_profile)                                       VALUES(:userFileId,                                              :userId,                                              :name,                                              :pathProfile);';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':userFileId', $this->userFileId);        $this->stmt->bindParam(':userId', $this->userId);        $this->stmt->bindParam(':name', $this->name);        $this->stmt->bindParam(':pathProfile', $this->pathProfile);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Salvo ou atualizo um registro */    public function SaveCover(int $userFileId, int $userId, string $name, string $pathCover): bool    {        /** Parâmetros de Entrada */        $this->userFileId = $userFileId;        $this->userId = $userId;        $this->name = $name;        $this->pathCover = $pathCover;        /** Consulta SQL */        $this->sql = 'INSERT INTO users_files(user_file_id,                                                 user_id,                                                 name,                                                 path_cover)                                       VALUES(:userFileId,                                              :userId,                                              :name,                                              :pathCover);';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':userFileId', $this->userFileId);        $this->stmt->bindParam(':userId', $this->userId);        $this->stmt->bindParam(':name', $this->name);        $this->stmt->bindParam(':pathCover', $this->pathCover);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Consulta de um registro especifico */    public function Get(int $userFileId)    {        /** Parâmetros de Entrada */        $this->userFileId = $userFileId;        /** Consulta SQL */        $this->sql = 'SELECT * FROM users_file WHERE user_file_id = :userFileId;';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':userFileId', $this->userFileId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Remoção de um registro especifico */    public function Delete(int $userFileId): bool    {        /** Parâmetros de Entrada */        $this->userFileId = $userFileId;        /** Consulta SQL */        $this->sql = 'DELETE FROM users_file WHERE user_file_id = :userFileId;';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':userFileId', $this->userFileId);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Listagem de todos os registros */    public function All(int $userFileId)    {        /** Parâmetros de Entrada */        $this->userFileId = $userFileId;        /** Consulta SQL */        $this->sql = 'SELECT                      cf.content_file_id,                      cf.content_id,                      cf.path,                      cf.name,                      h.description                      FROM contents_files cf                      JOIN highlighters h ON cf.highlighter_id = h.highlighter_id                        WHERE content_id = :contentId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':userFileId', $this->userFileId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}