<?php/** Defino o local onde esta a classe */namespace vendor\model;class HighlightersFiles{    /** Declaro as variavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;    private $highlighterFileId = null;    private $name = null;    private $description = null;    private $history = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new MySql();    }    /** Salvo ou atualizo um registro */    public function Save(int $highlighterFileId, string $name, string $description, string $history): bool    {        /** Parâmetros de Entrada */        $this->highlighterFileId = $highlighterFileId;        $this->name = $name;        $this->description = $description;        $this->history = $history;        /** Verifico o tipo de operação */        if ($this->highlighterFileId === 0)        {            /** Consulta SQL */            $this->sql = 'INSERT INTO HIGHLIGHTERS_FILES(highlighter_file_id,                                                  name,                                                 description,                                                 history)                                       VALUES(:highlighterFileId,                                               :name,                                              :description,                                              :history);';        }        else        {            /** Consulta SQL */            $this->sql = 'UPDATE HIGHLIGHTERS_FILES SET                           name = :name,                           description = :description,                           history = :history                          WHERE highlighter_file_id = :highlighterFileId';        }        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':highlighterFileId', $this->highlighterFileId);        $this->stmt->bindParam(':name', $this->name);        $this->stmt->bindParam(':description', $this->description);        $this->stmt->bindParam(':history', $this->history);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Consulta de um registro especifico */    public function Get(int $highlighterFileId)    {        /** Parâmetros de Entrada */        $this->highlighterFileId = $highlighterFileId;        /** Consulta SQL */        $this->sql = 'SELECT * FROM HIGHLIGHTERS_FILES WHERE highlighter_file_id = :highlighterFileId;';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':highlighterFileId', $this->highlighterFileId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Remoção de um registro especifico */    public function Delete(int $highlighterFileId): bool    {        /** Parâmetros de Entrada */        $this->highlighterFileId = $highlighterFileId;        /** Consulta SQL */        $this->sql = 'DELETE FROM HIGHLIGHTERS WHERE highlighter_files_id = :highlighterFileId;';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenchimento dos parâmetros */        $this->stmt->bindParam(':highlighterFileId', $this->highlighterFileId);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Listagem de todos os registros */    public function All()    {        /** Consulta SQL */        $this->sql = 'SELECT * FROM HIGHLIGHTERS_FILES;';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}